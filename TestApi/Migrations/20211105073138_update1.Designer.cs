// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestApi.Data;

namespace TestApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211105073138_update1")]
    partial class update1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("TestApi.Models.Face", b =>
                {
                    b.Property<int>("FaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("QRcode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ScanDataScanId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScanId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("address")
                        .HasColumnType("TEXT");

                    b.Property<int>("age")
                        .HasColumnType("INTEGER");

                    b.Property<int>("attrAge")
                        .HasColumnType("INTEGER");

                    b.Property<int>("attrBeauty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("attrExpression")
                        .HasColumnType("TEXT");

                    b.Property<string>("attrEye")
                        .HasColumnType("TEXT");

                    b.Property<string>("attrGender")
                        .HasColumnType("TEXT");

                    b.Property<string>("attrGlass")
                        .HasColumnType("TEXT");

                    b.Property<string>("attrMouth")
                        .HasColumnType("TEXT");

                    b.Property<string>("attrMustache")
                        .HasColumnType("TEXT");

                    b.Property<string>("attrSkinColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("attrSmile")
                        .HasColumnType("TEXT");

                    b.Property<string>("authType")
                        .HasColumnType("TEXT");

                    b.Property<int>("bgHeight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("bgWidth")
                        .HasColumnType("INTEGER");

                    b.Property<float>("blurProb")
                        .HasColumnType("REAL");

                    b.Property<string>("cap")
                        .HasColumnType("TEXT");

                    b.Property<string>("cardNum")
                        .HasColumnType("TEXT");

                    b.Property<string>("certificateNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("certificateType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("commonUuid")
                        .HasColumnType("TEXT");

                    b.Property<int>("coordX0")
                        .HasColumnType("INTEGER");

                    b.Property<int>("coordX1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("coordY0")
                        .HasColumnType("INTEGER");

                    b.Property<int>("coordY1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("debugStage")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .HasColumnType("TEXT");

                    b.Property<string>("ethic")
                        .HasColumnType("TEXT");

                    b.Property<int>("frameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("groupId")
                        .HasColumnType("TEXT");

                    b.Property<float>("headPitch")
                        .HasColumnType("REAL");

                    b.Property<float>("headRoll")
                        .HasColumnType("REAL");

                    b.Property<float>("headYaw")
                        .HasColumnType("REAL");

                    b.Property<string>("image")
                        .HasColumnType("TEXT");

                    b.Property<int>("imageX0")
                        .HasColumnType("INTEGER");

                    b.Property<int>("imageX1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("imageY0")
                        .HasColumnType("INTEGER");

                    b.Property<int>("imageY1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("irimg")
                        .HasColumnType("TEXT");

                    b.Property<int>("irimgX0")
                        .HasColumnType("INTEGER");

                    b.Property<int>("irimgX1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("irimgY0")
                        .HasColumnType("INTEGER");

                    b.Property<int>("irimgY1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("liveness")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("orgimg")
                        .HasColumnType("TEXT");

                    b.Property<string>("personId")
                        .HasColumnType("TEXT");

                    b.Property<string>("personUuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("plateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("respirator")
                        .HasColumnType("TEXT");

                    b.Property<string>("respiratorLevel")
                        .HasColumnType("TEXT");

                    b.Property<float>("score")
                        .HasColumnType("REAL");

                    b.Property<float>("similarity")
                        .HasColumnType("REAL");

                    b.Property<string>("status")
                        .HasColumnType("TEXT");

                    b.Property<float>("temperature")
                        .HasColumnType("REAL")
                        .HasColumnName("Temperature");

                    b.Property<string>("temperatureAlarm")
                        .HasColumnType("TEXT");

                    b.Property<int>("timestamp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("trackId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("userId")
                        .HasColumnType("TEXT");

                    b.HasKey("FaceId");

                    b.HasIndex("ScanDataScanId");

                    b.ToTable("Faces");
                });

            modelBuilder.Entity("TestApi.Models.ScanData", b =>
                {
                    b.Property<int>("ScanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LoggedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Operator")
                        .HasColumnType("TEXT")
                        .HasColumnName("operator");

                    b.Property<string>("_event")
                        .HasColumnType("TEXT")
                        .HasColumnName("event");

                    b.Property<string>("camid")
                        .HasColumnType("TEXT");

                    b.Property<string>("devid")
                        .HasColumnType("TEXT");

                    b.Property<string>("devmac")
                        .HasColumnType("TEXT");

                    b.Property<string>("devname")
                        .HasColumnType("TEXT");

                    b.Property<string>("devno")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("entertime")
                        .HasColumnType("TEXT");

                    b.Property<string>("logtime")
                        .HasColumnType("TEXT");

                    b.Property<string>("logtimelocal")
                        .HasColumnType("TEXT");

                    b.Property<int>("time")
                        .HasColumnType("INTEGER");

                    b.Property<int>("timelocal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("type")
                        .HasColumnType("TEXT");

                    b.HasKey("ScanId");

                    b.ToTable("ScanDatas");
                });

            modelBuilder.Entity("TestApi.Models.Face", b =>
                {
                    b.HasOne("TestApi.Models.ScanData", "ScanData")
                        .WithMany("Faces")
                        .HasForeignKey("ScanDataScanId");

                    b.Navigation("ScanData");
                });

            modelBuilder.Entity("TestApi.Models.ScanData", b =>
                {
                    b.Navigation("Faces");
                });
#pragma warning restore 612, 618
        }
    }
}
